[tool.poetry]
name = "dramatize-api"
version = "0.0.1"
description = ""
authors = ["tonofll"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.92.0"
uvicorn = "^0.20.0"
gunicorn = "20.1.0"
redis = "^4.5.1"
python-dotenv = "^0.21.1"

[tool.poetry.group.dev.dependencies]
black = "23.1.0"
ruff = "0.0.254"
mypy = "1.1.1"
pre-commit = "3.1.1"
types-requests = "2.28.11.15"
types-urllib3 = "1.26.25.8"
types-pyopenssl = "23.0.0.4"
types-cryptography = "3.3.23.2"
ipykernel = "6.21.3"
pytest = "7.2.2"
pytest-cov = "4.0.0"
pytest-mock = "3.10.0"
lxml-stubs = "0.4.0"
pylint = "2.17.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]
fail_under = 85


[tool.mypy]
# select folders
packages=["src", "tests"]
python_version = "3.10"
strict = true

plugins = "pydantic.mypy"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = false
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.ruff]
line-length = 100
src = ["src"]
format = "grouped" # Group errors by file
ignore-init-module-imports = true # Ignore errors in __init__.py files
select = [
    "F",   # pyflakes
    "RUF", # ruff specific rules
    "NPY", # numpy specific rules
    "PD",  # pandas vet
    "D",   # pydocstyle
    "E",   # pycodestyle (errors)
    "W",   # pycodestyle (warnings)
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtn shadowing
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez (enforce timezone aware datetimes)
    "EM",  # flak38-errmsg
    "PTH", # flake8-pathlib
]

fixable = [
    "I",    # auto sort imports
    "F401", # pyflakes - remove unused imports
    "UP",   # pyupgrade
    "F",    # pyflakes
    "C",    # pycodestyle
    "D",    # pydocstyle
    "W",    # pycodestyle (warnings)
]

ignore = [
    "ANN101", # Missing type annotation for self in class method
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "ANN102", # Missing type annotation for cls in classmethod (redundant)
]
target-version = "py310"

[tool.ruff.per-file-ignores]
# Dont be so strict with tests
"tests/**/*" = [
    "S101", # Allow asserts
    "D",    # Don't complain about docstrings in tests
    "A003"  # Allow shadowing of builtins
]

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator","classmethod"]

[tool.black]
line-length = 100
target-version = ["py310"]
